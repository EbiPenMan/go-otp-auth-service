basePath: /
definitions:
  auth.verifyOTPRequest:
    properties:
      otp:
        type: string
      phone_number:
        type: string
    required:
    - otp
    - phone_number
    type: object
  model.SendOTPRequest:
    properties:
      phone_number:
        type: string
    required:
    - phone_number
    type: object
  model.UserResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      phone_number:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for OTP based authentication and user management.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: OTP Auth GoLang API
  version: "1.0"
paths:
  /otp/send:
    post:
      consumes:
      - application/json
      description: |-
        Sends an OTP to the provided phone number for login or registration.
        Rate limit: 3 requests per phone number within 10 minutes.
      parameters:
      - description: Phone Number
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.SendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: OTP sent successfully (check console)'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Invalid phone number format'
          schema:
            additionalProperties:
              type: string
            type: object
        "429":
          description: 'error: Rate limit exceeded'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to process OTP request'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send OTP
      tags:
      - Authentication
  /otp/verify:
    post:
      consumes:
      - application/json
      description: |-
        Submits a phone number and OTP to get a JWT token.
        If the user doesn't exist, they will be registered.
      parameters:
      - description: Phone Number and OTP
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.verifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'token: <jwt_token>'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Invalid request format'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Invalid or expired OTP'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Verify OTP and Login/Register
      tags:
      - Authentication
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users, with optional search
      parameters:
      - default: 1
        description: Page number (default 1)
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page (default 10)
        in: query
        name: limit
        type: integer
      - description: Search by phone number
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'data: [], total: int'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: Invalid query parameters'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - User Management
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve details of a single user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: 'error: Invalid user ID'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - User Management
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
